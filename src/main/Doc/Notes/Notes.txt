Access:
http://localhost:8888/WicketSpringDataJPARichText_EssayLibrary/

Create JasperReport Pop link for Wicket 6:
See the following classes:
1. /WicketSpringDataJPARichText_EssayLibrary/src/main/java/com/library/essay/reports/resource/JasperReportGenerationResource.java
2. /WicketSpringDataJPARichText_EssayLibrary/src/main/java/com/library/essay/reports/wicket/component/ReportPopUpLink.java
3. /WicketSpringDataJPARichText_EssayLibrary/src/main/java/com/library/essay/reports/dataSource/JasperReportAbstractDataSource.java


Custom resources:

In Wicket the best way to add dynamic functionalities to our application (such as csv export, a pdf generated on the fly, etc...) is implementing a custom resource. In this paragraph as example of custom resource we will build a basic RSS feeds generator which can be used to publish feeds on our site (project CustomResourceMounting). Instead of generating a RSS feed by hand we will use Rome framework and its utility classes.

Class AbstractResource can be used as base class to implement new resources. This class defines abstract method newResourceResponse which is invoked when the resource is requested. The following is the code of our RSS feeds generator:

public class RSSProducerResource extends AbstractResource {
  @Override
  protected ResourceResponse newResourceResponse(Attributes attributes) {
    ResourceResponse resourceResponse = new ResourceResponse();
    resourceResponse.setContentType("text/xml");
    resourceResponse.setTextEncoding("utf-8");

    resourceResponse.setWriteCallback(new WriteCallback()
    {
      @Override
      public void writeData(Attributes attributes) throws IOException
      {
        OutputStream outputStream = attributes.getResponse().getOutputStream();
        Writer writer = new OutputStreamWriter(outputStream);
        SyndFeedOutput output = new SyndFeedOutput();
            try {
          output.output(getFeed(), writer);
        } catch (FeedException e) {
          throw new WicketRuntimeException("Problems writing feed to response...");
        }
      }      
    });

    return resourceResponse;
  }
  // method getFeed()…
}

Method newResourceResponse returns an instance of ResourceResponse representing the response generated by the custom resource. Since RSS feeds are based on XML, in the code above we have set the type of the response to text/xml and the text encoding to utf-8.

To specify the content that will be returned by our resource we must also provide an implementation of inner class WriteCallback which is responsible for writing content data to response's output stream. In our project we used class SyndFeedOutput from Rome framework to write our feed to response. Method getFeed() is just an utility method that generates a sample RSS feed (which is an instance of interface com.sun.syndication.feed.synd.SyndFeed).

Now that we have our custom resource in place, we can use it in the home page of the project. The easiest way to make a resource available to users is to expose it with link component ResourceLink:

add(new ResourceLink("rssLink", new RSSProducerResource()));


------------------------------------------------------------
For hbm2ddl.auto property the list of possible options is:

validate: validate that the schema matches, make no changes to the schema of the database, you probably want this for production.
update: update the schema to reflect the entities being persisted
create: creates the schema necessary for your entities, destroying any previous data.
create-drop: create the schema as in create above, but also drop the schema at the end of the session. This is great in early development or for testing.
--------------------------------------------------------------

Enable html style in text field:

<textField isStretchWithOverflow="true" isBlankWhenNull="true">
	<reportElement positionType="Float" x="16" y="61" width="544" height="64" uuid="df8c439e-ae96-4656-a27b-c4c58a029309"/>
	<textElement markup="html"/>
	<textFieldExpression><![CDATA[$F{content}]]></textFieldExpression>
</textField>

In IReport, set the Markup property to be html.

---------------------
References:
---------------------
Wicket and Tinymce:
http://mysticcoders.com/blog/wicket-tinymce-some-advanced-tips/

WicketStuff:
http://wicket.apache.org/guide/guide/wicketstuff.html#wicketstuff_2

Hibernate Search:
http://hibernate.org/search/documentation/getting-started/

Wicket Resources:
http://wicket.apache.org/guide/guide/resources.html

H2 Dastabase:
http://www.h2database.com/html/main.html

Spring Data JPA Official: 
http://docs.spring.io/spring-data/jpa/docs/current/reference/html/

Spring Data JPA Tutorial (Annotation Based): 
http://www.petrikainulainen.net/spring-data-jpa-tutorial/

Spring Data REST XML Configuration Example (XML Based): 
http://idodevjobs.wordpress.com/2014/07/12/spring-data-rest-xml-configuration-example/

USING SPRING DATA JPA IN A JAVA SE ENVIRONMENT AND RUN TESTS WITH DBUNIT: 
http://geowarin.github.io/2013/01/21/using-spring-data-jpa-in-a-java-se-environment-and-run-tests-with-dbunit/

Spring Data JPA Tutorial Example (XML Based): 
http://mprabhat.com/2013/09/07/spring-data-jpa/

Code Examples: 
http://source.lishman.com/tutorials/2050/hibernate-and-jpa/spring-data-jpa

Jasper report decoration with html:
http://mindfirejavaexperts.wordpress.com/2014/01/10/how-to-decorate-reports-in-jasper-reports-produce-certificates-with-it/
